/* К примеру, если мы хотим вывести на экран название первого дня недели ('пн'), то должны написать в квадратных скобках цифру 0, а не 1.

Логичнее и удобнее было бы все-таки для первого дня недели писать ключ 1, как привыкли мы в жизни.

В JavaScript есть способ указать ключи в явном виде - так, как нам нужно. Делается это с помощью объектов (в других языках программирования они называются ассоциативными массивами или хешами).

Объекты создаются с помощью фигурных скобок { }, внутри которых пишутся элементы этого объекта в формате ключ: значение.

Давайте сделаем так, чтобы понедельник имел ключ 1, а не ноль, как было раньше, и всем остальным ключам дней прибавим единицу: */

  // let obj = {
  //   1: 'a',
  //   2: 'b',
  //   3: 'c'
  // };
  // console.log(obj);

/* Как вы уже знаете, в массивах элементы располагаются в строгом порядке, ведь позиция каждого элемента определяет его ключ.

В объектах мы сами назначаем ключи, поэтому порядок следования элементов не имеет значения. То есть массивы являются упорядоченными списками, а объекты - нет. */

/* В объектах, в отличие от массивов, ключи могут быть не только числовыми, но и строковыми. При этом эти ключи-строки, в отличие от значений-строк, в кавычки брать не нужно */

/* А вот, чтобы обратиться к элементу со строковым ключом, в квадратных скобках его уже нужно брать в кавычки: */

  // let obj = {
  //   key1: 'a',
  //   key2: 'b',
  //   key3: 'c'
  // }

  // console.log(obj['key1']);

  // let obj = {
  //   a: 1,
  //   b: 2,
  //   c: 3
  // }
  // console.log(obj['a'] + obj['b'] + obj['c']);



/* Ключами объектов могут быть любые строки. Но есть, однако, ограничение: такие строки не могут начинаться с цифры и не могут содержать внутри себя дефис, пробел и тому подобные вещи.

Такие строки на самом деле являются допустимыми ключами, но только если их взять в кавычки: */

  // let obj = {
  //   '1key': 'a',
  //   'key-2': 'b', 
  //   key3: 'c'
  // };
  // console.log(obj['1key']); 
  // console.log(obj['key-2']); 
  // console.log(obj['key3']); 


  // let obj = {
  //   '1a': 1,
  //   '2b': 2,
  //   'c-c': 3
  // };
  // console.log(
  //   obj['1a'] +
  //   obj['2b'] +
  //   obj['c-c']
  // );

/* Альтерантивный синстаксис
  Как вы видите, в данном случае мы пишем после переменной с объектом мы пишем точку и имя ключа без кавычек.

  Данный альтернативный способ имеет ограничение: так допустимо обращаться только к тем ключам, которых при создании объекта не обязательно брать в кавычки. Изученный нами новый синтаксис обычно называют обращение через свойство объекта. */

  // let obj = {
  //   key1: 1,
  //   key2: 2,
  //   key3: 3
  // };
  // console.log(
  //   obj.key1 + obj.key2 + obj.key3
  // );

  // let user = {
  //   name: 'Oleg',
  //   surname: 'Bidkhov',
  //   patronymic: 'Ruslanovich'
  // }
  // console.log(user.name + ' ' + user.surname + ' ' + user.patronymic);

  // let date = {
  //   1: 1999,
  //   month: 'June',
  //   day: 29
  // };
  // console.log(date[1] + '-' + date.month + '-' + date.day);

/* Заполнение */

  let obj = {};

  obj[1] = 'a';
  obj.key2 = 'b';
  obj['3key'] = 'c';

  console.log(obj);






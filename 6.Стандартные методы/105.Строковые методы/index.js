// Строковые методы

  // toUpperCase - преобразование строк в верхний регистр, возвращается новая строка, исходная не меняется.
  // строка.toUpperCase()
    // let str = 'Язык JavaScript'
    // console.log(str.toUpperCase())

  
  // toLowerCase к меньшему регистру
  // строка.toLowerCase()


// let str = 'JS';
// console.log(str.toLowerCase());


  // Метод substr возвращает подстроку из строки (исходная строка при этом не изменяется).
  /*Первый параметр задает номер символа, с которого метод начинает отрезать (учтите, что нумерация с нуля), а второй параметр - сколько символов отрезать.

  Первый параметр может принимать отрицательные значения. В этом случае отсчет символа, с которого начинается обрезание, будет идти с конца строки. Причем последний символ имеет номер -1, предпоследний - -2 и так далее. */

  // строка.substr(откуда отрезать, 
  //   [сколько символов отрезать]) 
// substr - в vs code признано устаревшим


  // Метод substring возвращает подстроку из строки (исходная строка при этом не изменяется)//Если первый параметр больше второго, тогда substring ведет себя, как будто они поменялись местами. Например, написать str.substring(3, 0) все равно что написать str.substring(0, 3).

  //строка.substring(откуда начать отрезать, 
	// [докуда отрезать]) 

    // let str = 'abcde';
    // let sub = str.substring(1, 3)
    // console.log(sub);
  //Результат выполнения кода (символ с номером 3 не включится в вырезанную часть):

  
  //Метод slice возвращает подстроку из строки (исходная строка при этом не изменяется).

  /* строка.slice(откуда отрезать, 
	[докуда отрезать])  */

  /* let str = 'abcde';
  let sub = str.slice(1, -2);

  console.log(sub); */


// let str = 'я учу javascript!'
// console.log(str.slice(5, -1));


//Работа с indexOf

    // Метод indexOf осуществляет поиск подстроки (указывается первым параметром) в строке.

  //строка.indexOf(что ищем, [откуда начинать 
	// поиск]);
  
  //Но метод чувствителен к регистру символов

    // let str = 'Я учу учу JavaScript'
    // console.log(str.indexOf('учу'));

  //Метод вернет 2 (с этой позиции начинается первое слово 'учу' в строке):



    //Метод lastIndexOf осуществляет поиск подстроки (указывается первым параметром) в строке. Поиск ведется с конца строки.
  
  /* строка.lastIndexOf(что ищем, [откуда 
	начинать поиск]); */

  //let str = 'Б..Б..Б';
  // console.log(str.lastIndexOf('Б'));

  //Выведет 6

// let str = 'abcda';
// let f;

// if(str[str.length - 1] === 'a'){
//    f = true;
//   } else {
//    f = false;
//   }
//   console.log(f);


// let str = 'http://pizda.html';
// console.log(str.indexOf('http://'))
// console.log(str.slice(-5) === '.html')
// console.log(str.slice(0, 7) === 'http://')


    // Метод startsWith() помогает определить, начинается ли строка с символов указанных в скобках, возвращая, соответственно, true или false.

    // var str = 'Быть или не быть, вот в чём вопрос.';

    // console.log(str.startsWith('Быть'));        // true
    // console.log(str.startsWith('не быть'));     // false
    // console.log(str.startsWith('не быть', 9));  // true



    // Метод endsWith() позволяет определить, заканчивается ли строка символами указанными в скобках, возвращая, соответственно, true или false.

    // var str = 'Быть или не быть, вот в чём вопрос.';

    // console.log(str.endsWith('вопрос.'));   // true
    // console.log(str.endsWith('быть'));      // false
    // console.log(str.endsWith('быть', 16));  // true


// let str = 'http://webcam.com'
// let str2 = 'http://pizda.html'
// console.log(str.startsWith('http://'))
// console.log(str2.endsWith('.html'));



//Работа с split

  // Метод split осуществляет разбиение строки в массив по указанному разделителю.

  // Разделитель указывается первым необязательным параметром. Если он не задан - вернется вся строка. Если он задан как пустые кавычки '' - то каждый символ строки попадет в отдельный элемент массива.

  /* строка.split([разделитель], [максимальное 
	количество элементов]) */

  /* Дана строка с цифрами. Найдем сумму цифр из этой строки. Для этого разобьем строку в массив, а затем переберем этот массив и найдем его сумму. Нас ждет подвох: split возвращает строки, поэтому при суммировании преобразуем эти цифры-строки в настоящие числа с помощью Numbe */

  /* let str = '12345';
  let arr = str.split('');
  let sum = 0;

  for (let i = 0; i < arr.length; 
    i++) { 
    sum += Number(arr[i]);
  }

  console.log(sum); */

  //Дано число. Давайте запишем каждую цифру этого числа в отдельный элемент массива. Тут есть подвох - split применяется только к строкам, а у нас число. Преобразуем вначале число к строке с помощью String, а затем применим split:

  /* let num = 12345;
  let str = String(num);
  let arr = str.split('');

  console.log(arr); */

  // let str = 'html-css-javascript';
  // let arr = str.split('-');

  // console.log(arr); // ['html', 'css' 'javascript']


//Метод join Метод join объединяет элементы массива в строку с указанным разделителем (он будет вставлен между элементами массива).

  //arr.join('')
  
  //Дана дата в формате '2025-12-31'. Давайте сделаем из нее формат '31.12.2025'. Для этого разобьем строку в массив с помощью split, перевернем этот массив с помощью reverse и затем сольем перевернутый массив обратно с помощью join:

  // let date = '2025-12-31';
  // let result = date.split('-').reverse().join('.');
  // console.log(result, date);

// let str = '12345';
// let arr = str.split('');
// console.log(arr);

// let arr = [1, 2, 3, 4, 5];
// let str = arr.join('-');
// console.log(str);